The ``lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

This is an example text file in reStructuredText format.  First import
``lazy_matrix_mul`` from the ``lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

======================
Doc Test             |
======================

    >>> len(__import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__) > 1
    True

    >>> len(__import__("101-lazy_matrix_mul").__doc__) > 1
    True

======================
Typical Test         |
======================

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])

    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

    >>> lazy_matrix_mul([[1, 2], [1, 3], [2, 4]], [[3, 4, 4], [5, 6, 4]])
    array([[13, 16, 12],
           [18, 22, 16],
           [26, 32, 24]])

    >>> lazy_matrix_mul([[1, 2], [1, 3], [2, 4], [3, 4]], [[3, 4, 4, 4, 3], [5, 6, 4, 4, 5]])
    array([[13, 16, 12, 12, 13],
           [18, 22, 16, 16, 18],
           [26, 32, 24, 24, 26],
           [29, 36, 28, 28, 29]])

    >>> lazy_matrix_mul([[1, 2], [1, 3], [2, float('-inf')]], [[3, 4, float('inf')], [5, 6, 4]])
    array([[ 13.,  16.,  inf],
           [ 18.,  22.,  inf],
           [-inf, -inf,  nan]])

    >>> lazy_matrix_mul([[1, 2], [1, 3.4354], [2, 12.3]], [[3.21, 0.34, 3.4], [5, 6, 4]])
    array([[13.21  , 12.34  , 11.4   ],
           [20.387 , 20.9524, 17.1416],
           [67.92  , 74.48  , 56.    ]])

    >>> lazy_matrix_mul([[1, 2], [1, 3], [2, float('-inf')]], [[float('inf'), float('inf'), float('inf')], [5, 6, 4]])
    array([[inf, inf, inf],
           [inf, inf, inf],
           [nan, nan, nan]])

    >>> lazy_matrix_mul([[1, 2, 3]], (1, 2, 3))
    array([14])

    >>> lazy_matrix_mul([[-1, -2], [1, 3], [2, 4], [3, 4]], [[3, 4, 4, 4, 3], [5, 6, 4, 4, 5]])
    array([[-13, -16, -12, -12, -13],
           [ 18,  22,  16,  16,  18],
           [ 26,  32,  24,  24,  26],
           [ 29,  36,  28,  28,  29]])

======================
Error case           |
======================


Error Type
----------------------

    >>> lazy_matrix_mul(1, [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([1, 3, 4], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)

    >>> lazy_matrix_mul([[1, 3]], 1)
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[1, 3]], [1, 3, 4])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)

    >>> lazy_matrix_mul(1, 1)
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[1, "School"]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, 3]], [["School", 4], [5, 6]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, "School"]], [["School", 4], [5, 6]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, 2], [3, 4, 3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2, 3], [3, 4]], [[1, 2, 4], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], []])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], []], [[1, 2], [1, 3]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], []], [[1, 2], []])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

Error Argu
----------------------

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
    >>> lazy_matrix_mul([[1, 2, 3]])
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


Error Value
----------------------

    >>> lazy_matrix_mul([[1, 3]], [])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

    >>> lazy_matrix_mul([[1, 3]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> lazy_matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

    >>> lazy_matrix_mul([[]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> lazy_matrix_mul([[1, 2, 3], [3, 4, 3]], [[1, 2], [3, 4], [2, 4], [1, 2], [1, 3]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,3) and (5,2) not aligned: 3 (dim 1) != 5 (dim 0)

    >>> lazy_matrix_mul([[1, 2, 3], [3, 4, 3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

    >>> lazy_matrix_mul((8, 9), [[1, 2, 3]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,) and (1,3) not aligned: 2 (dim 0) != 1 (dim 0)
