x_mul`` module

======================



Using ``matrix_mul``

-------------------



This is an example text file in reStructuredText format.  First import

``matrix_mul`` from the ``matrix_mul`` module:



    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul



    Now use it:



    ======================

    Doc Test             |

    ======================



        >>> len(__import__("100-matrix_mul").matrix_mul.__doc__) > 1

	    True



	        >>> len(__import__("100-matrix_mul").__doc__) > 1

		    True



		    ======================

		    Typical Test         |

		    ======================



		        >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])

	    [[7, 10], [15, 22]]



	        >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])

	    [[13, 16]]



	        >>> matrix_mul([[1, 2], [1, 3], [2, 4]], [[3, 4, 4], [5, 6, 4]])

	    [[13, 16, 12], [18, 22, 16], [26, 32, 24]]



	        >>> matrix_mul([[1, 2], [1, 3], [2, 4], [3, 4]], [[3, 4, 4, 4, 3], [5, 6, 4, 4, 5]])

	    [[13, 16, 12, 12, 13], [18, 22, 16, 16, 18], [26, 32, 24, 24, 26], [29, 36, 28, 28, 29]]



	        >>> matrix_mul([[1, 2], [1, 3], [2, float('-inf')]], [[3, 4, float('inf')], [5, 6, 4]])

		    [[13, 16, inf], [18, 22, inf], [-inf, -inf, nan]]



		        >>> matrix_mul([[1, 2], [1, 3.4354], [2, 12.3]], [[3.21, 0.34, 3.4], [5, 6, 4]])

	    [[13.21, 12.34, 11.4], [20.387, 20.9524, 17.1416], [67.92, 74.48000000000002, 56.0]]



	        >>> matrix_mul([[1, 2], [1, 3], [2, float('-inf')]], [[float('inf'), float('inf'), float('inf')], [5, 6, 4]])

		    [[inf, inf, inf], [inf, inf, inf], [nan, nan, nan]]



		        >>> matrix_mul([[1, 2], [1, 3], [2, 4], [3, 4]], [[3, -4,- 4, 4, -3], [-5.3, 6, 4, 4, 5]])

	    [[-7.6, 8, 4, 12, 7], [-12.899999999999999, 14, 8, 16, 12], [-15.2, 16, 8, 24, 14], [-12.2, 12, 4, 28, 11]]



	    ======================

	    Error case           |

	    ======================





	    Error Type

	    ----------------------



	        >>> matrix_mul(1, [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul([1, 3, 4], [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list of lists



			        >>> matrix_mul([[1, 3]], 1)

	    Traceback (most recent call last):

		        ...

			    TypeError: m_b must be a list



			        >>> matrix_mul([[1, 3]], [1, 3, 4])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_b must be a list of lists



			        >>> matrix_mul(1, 1)

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul([[1, "School"]], [[3, 4], [5, 6]])

				    Traceback (most recent call last):

					        ...

						    TypeError: m_a should contain only integers or floats



						        >>> matrix_mul([[1, 3]], [["School", 4], [5, 6]])

							    Traceback (most recent call last):

								        ...

									    TypeError: m_b should contain only integers or floats



									        >>> matrix_mul([[1, "School"]], [["School", 4], [5, 6]])

										    Traceback (most recent call last):

											        ...

												    TypeError: m_a should contain only integers or floats



												        >>> matrix_mul([[1, 2], [3, 4, 3]], [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_a must be of the same size



			        >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_b must be of the same size



			        >>> matrix_mul([[1, 2, 3], [3, 4]], [[1, 2, 4], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_a must be of the same size



			        >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], []])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_b must be of the same size



			        >>> matrix_mul([[1, 2], []], [[1, 2], [1, 3]])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_a must be of the same size



			        >>> matrix_mul([[1, 2], []], [[1, 2], []])

	    Traceback (most recent call last):

		        ...

			    TypeError: each row of m_a must be of the same size



			        >>> matrix_mul(None, [[1, 2, 3]])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul([[1, 2, 3]], None)

	    Traceback (most recent call last):

		        ...

			    TypeError: m_b must be a list



			        >>> matrix_mul([1, 2, 3], None)

	    Traceback (most recent call last):

		        ...

			    TypeError: m_b must be a list



			        >>> matrix_mul(None, [1, 2, 3])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul((8, 9), [[1, 2, 3]])

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul((8, 9), (3, 4, 4))

	    Traceback (most recent call last):

		        ...

			    TypeError: m_a must be a list



			        >>> matrix_mul([[1, 2, 3], [1, 2, 3]], (3, 4, 4))

	    Traceback (most recent call last):

		        ...

			    TypeError: m_b must be a list



			    Error Argu

			    ----------------------



			        >>> matrix_mul()

	    Traceback (most recent call last):

		        ...

			    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

			        >>> matrix_mul([[1, 2, 3]])

	    Traceback (most recent call last):

		        ...

			    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'





			    Error Value

			    ----------------------



			        >>> matrix_mul([[1, 3]], [])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_b can't be empty



			        >>> matrix_mul([[1, 3]], [[]])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_b can't be empty



			        >>> matrix_mul([], [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_a can't be empty



			        >>> matrix_mul([[]], [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_a can't be empty



			        >>> matrix_mul([[1, 2, 3], [3, 4, 3]], [[1, 2], [3, 4], [2, 4], [1, 2], [1, 3]])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_a and m_b can't be multiplied



			        >>> matrix_mul([[1, 2, 3], [3, 4, 3]], [[1, 2], [3, 4]])

	    Traceback (most recent call last):

		        ...

			    ValueError: m_a and m_b can't be multiplied
